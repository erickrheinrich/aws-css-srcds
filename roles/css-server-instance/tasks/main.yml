---
- name: call infra if not created
  include_role:
    name: infra
  when:
    - create_infra

- name: create temporary template file
  tempfile:
    state: file
    suffix: XXXXXXXXXXXXXXXX.json
  register: instance_template_path

- name: create temporary userdata file
  tempfile:
    state: file
    suffix: XXXXXXXXXXXXXXXX.sh
  register: userdata_css_server

- name: generate and write cloud formation instances template to file
  shell: "{{ python_path }}python {{role_path}}/files/css-server-instance.py > {{instance_template_path.path}}"

- name: instance userdata
  template:
    src: css-server-install.sh.j2
    dest: "{{ userdata_css_server.path }}"

- name: upload template to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{instance_template_path.path}}"
    object: "{{stack_name}}-instance.json"
    expiration: 1800
  register: cfn_instance_template

- name: upload css-init-config.sh to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{role_path}}/files/css-init-config.sh"
    object: "{{stack_name}}-css-init-config.sh"
    expiration: 1800
  register: css_init_config_script

- name: upload CSS install script to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{userdata_css_server.path}}"
    object: "{{stack_name}}-install.sh"
    expiration: 1800
  register: css_install_script

- name: upload mapcycle.txt to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{role_path}}/files/cfg/mapcycle.txt"
    object: "cfg/mapcycle.txt"
    expiration: 1800
  register: css_mapcycle_txt
  tags: upload_css_files

- name: upload server.cfg to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{role_path}}/files/cfg/server.cfg"
    object: "cfg/server.cfg"
    expiration: 1800
  register: css_server_cfg
  tags: upload_css_files

- name: upload mods.tgz to s3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ bucket_name }}"
    mode: put
    src: "{{role_path}}/files/mods.tgz"
    object: "mods.tgz"
    expiration: 1800
  register: css_mods_tgz
  tags: upload_css_files

- name: deploy instance stack
  cloudformation:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    stack_name: "{{ stack_name }}-instances-{{ ansible_date_time.epoch }}"
    state: present
    template_url: "{{ cfn_instance_template.url }}"
    template_parameters:
      AWSAccessKey: "{{ aws_access_key }}"
      AWSSecretKey: "{{ aws_secret_key }}"
      AmiIdLinux: "{{ami_id_linux}}"
      InstanceType: "{{css_server_instance_type}}"
      IAMRole: "{{iam_role}}"
      KeyName: "{{key_name}}"
      CSSInstanceName: "{{ stack_name }}-css-server"
      CSSInitConfigScript: "{{ css_init_config_script.url | urlsplit('scheme') }}://{{ css_init_config_script.url | urlsplit('hostname') }}{{ css_init_config_script.url | urlsplit('path') }}"
      CSSInstallScript: "{{ css_install_script.url | urlsplit('scheme') }}://{{ css_install_script.url | urlsplit('hostname') }}{{ css_install_script.url | urlsplit('path') }}"
      CSSModsTgz: "{{ css_mods_tgz.url | urlsplit('scheme') }}://{{ css_mods_tgz.url | urlsplit('hostname') }}{{ css_mods_tgz.url | urlsplit('path') }}"
      CSSMapcycleTxt: "{{ css_mapcycle_txt.url | urlsplit('scheme') }}://{{ css_mapcycle_txt.url | urlsplit('hostname') }}{{ css_mapcycle_txt.url | urlsplit('path') }}"
      CSSServerCfg: "{{ css_server_cfg.url | urlsplit('scheme') }}://{{ css_server_cfg.url | urlsplit('hostname') }}{{ css_server_cfg.url | urlsplit('path') }}"
      CSSRconPassword: "{{ css_rcon_password }}"
      BucketName: "{{ bucket_name }}"
      VPCId: "{{ infra['VPCId'] }}"
      PublicSubnet: "{{ infra['PublicSubnet1'] }}"
      PrivateSubnet: "{{ infra['PrivateSubnet1'] }}"
    tags:
      Name: "{{environment_name}}-css-server"
      Application: "css-server"
      Environment: "{{environment_name}}"

- name: remove temporary template file
  file:
    path: "{{instance_template_path.path}}"
    state: absent

- name: remove temporary userdata file
  file:
    path: "{{ userdata_css_server.path }}"
    state: absent